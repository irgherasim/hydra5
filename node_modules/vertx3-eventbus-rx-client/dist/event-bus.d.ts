import 'rxjs/add/observable/bindNodeCallback';
import 'rxjs/add/observable/defer';
import 'rxjs/add/observable/empty';
import 'rxjs/add/observable/fromEvent';
import 'rxjs/add/observable/fromEventPattern';
import 'rxjs/add/observable/merge';
import 'rxjs/add/operator/first';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/mapTo';
import 'rxjs/add/operator/startWith';
import 'rxjs/add/operator/takeUntil';
import { Observable } from 'rxjs/Observable';
import { CloseEvent } from './model/close-event';
import { Message } from './model/message';
import { Options } from './model/options';
import { State } from './model/state';
export declare class EventBus {
    static create(url: string, options?: Options): EventBus;
    delegate: any;
    defaultHeaders: any;
    state$: Observable<State>;
    readonly state: State;
    readonly closeEvent: CloseEvent | null;
    private _closeEvent;
    constructor(delegate: any);
    send(address: string, message: any, headers?: any): void;
    rxSend(address: string, message: any, headers?: any): Observable<Message<any>>;
    publish(address: string, message: any, headers?: any): void;
    rxConsumer(address: string, headers?: any): Observable<Message<any>>;
    close(): void;
    setPingEnabled(enabled: boolean): void;
    private _appendReplyFns;
    private readonly _stateOpenEvent$;
    private readonly _stateClosedEvent$;
}
